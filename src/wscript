def build(bld):
  libs = ['modint', 'bit', 'rmq', 'point', 'line', 'convex_polytope']

  for lib in libs:
    test_module = lib + '_test'
    source_file = test_module + '.cpp'
    bld.program(
      features = 'gtest',
      source = source_file,
      includes = '.',
      use = 'PTHREAD',
      target = test_module)

  libs2 = [ 'msp'
          , 'edit_distance'
          , 'kmp'
          , 'unionfind'
          , 'z_algorithm'
          , 'dijkstra'
          , 'scc']

  dependencies = [ []
  	         , []      
		 , []
		 , []
		 , []
		 , []
		 , ['unionfind']
  ] 

  for i in xrange(len(libs2)):
    lib = libs2[i]
    dependency = dependencies[i]

    source_files_cpp = []
    source_files_cpp.append(lib + '.cpp')
    source_files_cpp.extend(map(lambda d: d+'.cpp', dependency))

    source_file_hpp = lib + '.hpp'
    source_file_test = lib + '_test.cpp'
    test_module = lib + '_test'
    target_module = lib.upper()

    bld.stlib(
      source = source_files_cpp,
      includes = '.',
      use = 'PTHREAD',
      target = target_module)

    bld.program(
      features = 'gtest',
       source = source_file_test,
       includes = '.',
       use = ['PTHREAD', target_module],
       target = test_module)
